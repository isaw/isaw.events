Metadata-Version: 1.0
Name: isaw.events
Version: 0.1
Summary: UNKNOWN
Home-page: http://svn.plone.org/svn/plone/plone.example
Author: Christopher Warner
Author-email: christopher.warner@nyu.edu
License: GPL
Description: Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
            >>> browser.open(portal_url)
        
        We have the login portlet, so let's use that.
        
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.
        
        We then test that we are still on the portal front page:
        
            >>> browser.url == portal_url
            True
        
        And we ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        
        -*- extra stuff goes here -*-
        The isaw.events content type
        ===============================
        
        In this section we are tesing the isaw.events content type by performing
        basic operations like adding, updadating and deleting isaw.events content
        items.
        
        Adding a new isaw.events content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'isaw.events' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('isaw.events').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'isaw.events' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'isaw.events Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        And we are done! We added a new 'isaw.events' content item to the portal.
        
        Updating an existing isaw.events content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
            >>> browser.getLink('Edit').click()
            >>> browser.getControl(name='title').value = 'New isaw.events Sample'
            >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
            >>> 'Changes saved' in browser.contents
            True
            >>> 'New isaw.events Sample' in browser.contents
            True
        
        Removing a/an isaw.events content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New isaw.events
        Sample' title in the global navigation tabs.
        
            >>> browser.open(portal_url)
            >>> 'New isaw.events Sample' in browser.contents
            True
        
        Now we are going to delete the 'New isaw.events Sample' object. First we
        go to the contents tab and select the 'New isaw.events Sample' for
        deletion.
        
            >>> browser.getLink('Contents').click()
            >>> browser.getControl('New isaw.events Sample').click()
        
        We click on the 'Delete' button.
        
            >>> browser.getControl('Delete').click()
            >>> 'Item(s) deleted' in browser.contents
            True
        
        So, if we go back to the home page, there is no longer a 'New isaw.events
        Sample' tab.
        
            >>> browser.open(portal_url)
            >>> 'New isaw.events Sample' in browser.contents
            False
        
        Adding a new isaw.events content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add isaw.events content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = 'contributor'
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        We select 'isaw.events' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('isaw.events').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'isaw.events' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'isaw.events Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        Done! We added a new isaw.events content item logged in as contributor.
        
        Finally, let's login back as manager.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        
        
        
        Change history
        **************
        
        Changelog
        =========
        
        0.1 (2010-25-01)
        ----------------
        
        - Created recipe with ZopeSkel
        - Added XHTML+RDFa 1.0 schema - rdf-view
        - Added hCalendar Microformat - hcal-view
        - Basic content type data
        - Documentation
          [Christopher Warner - ISAW]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
            >>> browser.open(portal_url)
        
        We have the login portlet, so let's use that.
        
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.
        
        We then test that we are still on the portal front page:
        
            >>> browser.url == portal_url
            True
        
        And we ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        
        -*- extra stuff goes here -*-
        The events content type
        ===============================
        
        In this section we are tesing the events content type by performing
        basic operations like adding, updadating and deleting events content
        items.
        
        Adding a new events content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'events' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('events').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'events' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'events Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        And we are done! We added a new 'events' content item to the portal.
        
        Updating an existing events content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
            >>> browser.getLink('Edit').click()
            >>> browser.getControl(name='title').value = 'New events Sample'
            >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
            >>> 'Changes saved' in browser.contents
            True
            >>> 'New events Sample' in browser.contents
            True
        
        Removing a/an events content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New events
        Sample' title in the global navigation tabs.
        
            >>> browser.open(portal_url)
            >>> 'New events Sample' in browser.contents
            True
        
        Now we are going to delete the 'New events Sample' object. First we
        go to the contents tab and select the 'New events Sample' for
        deletion.
        
            >>> browser.getLink('Contents').click()
            >>> browser.getControl('New events Sample').click()
        
        We click on the 'Delete' button.
        
            >>> browser.getControl('Delete').click()
            >>> 'Item(s) deleted' in browser.contents
            True
        
        So, if we go back to the home page, there is no longer a 'New events
        Sample' tab.
        
            >>> browser.open(portal_url)
            >>> 'New events Sample' in browser.contents
            False
        
        Adding a new events content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add events content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = 'contributor'
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        We select 'events' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('events').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'events' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'events Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        Done! We added a new events content item logged in as contributor.
        
        Finally, let's login back as manager.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url)
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        
        
        
        Contributors
        ************
        
        Christopher Warner - ISAW, Author
        
        
        Download
        ********
        
Keywords: events isaw schedule calendar
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
